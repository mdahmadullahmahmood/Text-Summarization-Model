# -*- coding: utf-8 -*-
"""Text summarization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w4vkF6zzhBhxAAgAkyld9a-F7O2yMp5g
"""

!pip install transformers streamlit bert-extractive-summarizer sentencepiece torch joblib pymupdf

from transformers import pipeline
from summarizer import Summarizer


# Load models from Hugging Face
bart_summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
t5_summarizer = pipeline("summarization", model="t5-large")
bert_summarizer = Summarizer()

print("‚úÖ Models loaded successfully!")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from transformers import pipeline
# from summarizer import Summarizer  # Corrected import
# import fitz  # PyMuPDF for PDF support
# import os
# 
# # Initialize models for summarization
# @st.cache_resource
# def load_bart_model():
#     return pipeline("summarization", model="facebook/bart-large-cnn", device=0)
# 
# @st.cache_resource
# def load_t5_model():
#     return pipeline("summarization", model="t5-large", device=0)
# 
# @st.cache_resource
# def load_bert_extractive_model():
#     return Summarizer()
# 
# # Function to extract text from PDF
# def extract_text_from_pdf(uploaded_file):
#     doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
#     text = ""
#     for page in doc:
#         text += page.get_text("text") + "\n"
#     return text
# 
# # Streamlit UI setup
# st.set_page_config(page_title="Text Summarization Tool üìù", page_icon="üìù", layout="wide")
# 
# # Custom CSS for better UI
# st.markdown("""
#     <style>
#         .title { text-align: center; font-size: 36px; color: #1a1a1a; }
#         .description { text-align: center; font-size: 20px; color: #555; margin-bottom: 50px; }
#         .summary-box { border: 2px solid #4CAF50; padding: 20px; background-color: #f1f1f1; border-radius: 10px; margin-top: 30px; }
#     </style>
# """, unsafe_allow_html=True)
# 
# # App header
# st.markdown('<div class="title">Text Summarization Tool üìù</div>', unsafe_allow_html=True)
# st.markdown('<div class="description">Summarize any text or PDF effortlessly using NLP-based models.</div>', unsafe_allow_html=True)
# 
# # Sidebar options
# st.sidebar.title("Settings")
# min_length = st.sidebar.slider("Minimum Summary Length", 50, 200, 100)
# max_length = st.sidebar.slider("Maximum Summary Length", 150, 500, 300)
# 
# # Select summarization model
# model_choice = st.sidebar.selectbox("Choose Summarization Model", ["BART", "T5", "Extractive (BERT)"])
# 
# # Load the selected model
# if model_choice == "BART":
#     summarizer = load_bart_model()
# elif model_choice == "T5":
#     summarizer = load_t5_model()
# elif model_choice == "Extractive (BERT)":
#     summarizer = load_bert_extractive_model()
# 
# # File upload for text input
# uploaded_file = st.file_uploader("Upload a text or PDF file", type=["txt", "pdf"])
# 
# if uploaded_file is not None:
#     if uploaded_file.name.endswith(".pdf"):
#         file_text = extract_text_from_pdf(uploaded_file)
#     else:
#         file_text = uploaded_file.read().decode("utf-8")
#     st.text_area("Uploaded Text", file_text, height=300)
# else:
#     input_text = st.text_area("Enter your text here for summarization", height=300)
# 
# # Button to generate summary
# if st.button("Summarize"):
#     if uploaded_file is not None or input_text.strip():
#         with st.spinner("Summarizing..."):
#             text_to_summarize = file_text if uploaded_file else input_text
# 
#             if model_choice == "Extractive (BERT)":
#                 summary_text = summarizer(text_to_summarize, min_length=min_length)
#             else:
#                 summary = summarizer(text_to_summarize, max_length=max_length, min_length=min_length, do_sample=False)
#                 summary_text = summary[0]['summary_text']
# 
#             # Display summary
#             st.markdown('<div class="summary-box">', unsafe_allow_html=True)
#             st.markdown('<div class="summary-header">Summary:</div>', unsafe_allow_html=True)
#             st.markdown(f'<div class="summary-text">{summary_text}</div>', unsafe_allow_html=True)
#             st.markdown('</div>', unsafe_allow_html=True)
# 
#             # Option to download summary
#             summary_filename = "summary.txt"
#             with open(summary_filename, "w") as f:
#                 f.write(summary_text)
#             st.download_button("Download Summary", data=open(summary_filename, "r").read(), file_name=summary_filename)
#     else:
#         st.warning("Please input some text or upload a file to summarize.")
# 
# # Sidebar information
# st.sidebar.markdown("### About this Tool")
# st.sidebar.write("This tool uses pre-trained models (BART, T5, and BERT) from Hugging Face to summarize text or PDF content efficiently.")
# 
# # Footer
# st.markdown("""
#     <div style="text-align: center; margin-top: 50px; color: #888; font-size: 14px;">
#         Built with ‚ù§Ô∏è MD AHMADULLAH MAHMOOD | Powered by Hugging Face & Streamlit
#     </div>
# """, unsafe_allow_html=True)
#

!wget -q -O - ipv4.icanhazip.com # this will generate the local tunnel code

!streamlit run app.py & npx localtunnel --port 8501 # this will generate the streamlit app